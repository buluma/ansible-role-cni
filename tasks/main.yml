---

- name: ensure CNI bin directory
  ansible.builtin.file:
    path: "{{ cni_bin_directory }}"
    state: directory
    mode: 0755
    owner: "{{ cni_owner | default('omit') }}"
    group: "{{ cni_group | default('omit') }}"
  tags:
    - cni-download

- name: ensure TMP directory
  ansible.builtin.file:
    path: "{{ cni_tmp_directory }}"
    state: directory
    mode: 0755
    owner: "{{ cni_owner | default('omit') }}"
    group: "{{ cni_group | default('omit') }}"
  tags:
    - cni-download

- name: ensure CNI configuration directory
  ansible.builtin.file:
    path: "{{ cni_conf_directory }}"
    state: directory
    mode: 0755
    owner: "{{ cni_owner | default('omit') }}"
    group: "{{ cni_group | default('omit') }}"
  tags:
    - cni-conf

- name: downloading CNI archive
  ansible.builtin.get_url:
    url: "{{ cni_url }}"
    dest: "{{ cni_tmp_directory }}/{{ cni_archive }}"
    mode: 0640
    checksum: "sha256:{{ cni_url }}.sha256"
  tags:
    - cni-download

- name: unarchive CNI archive
  ansible.builtin.unarchive:
    src: "{{ cni_tmp_directory }}/{{ cni_archive }}"
    dest: "{{ cni_tmp_directory }}"
    remote_src: true
  notify:
    - restart kubelet
  tags:
    - cni-unarchive
    - cni-download

- name: copy CNI binary to destination directory
  ansible.builtin.copy:
    src: "{{ cni_tmp_directory }}/{{ item }}"
    dest: "{{ cni_bin_directory }}/{{ item }}"
    mode: "{{ cni_binary_mode }}"
    owner: "{{ cni_owner | default(omit) }}"
    group: "{{ cni_group | default(omit) }}"
    remote_src: true
  with_items:
    - macvlan
    - static
    - vlan
    - portmap
    - host-local
    - vrf
    - bridge
    - tuning
    - firewall
    - host-device
    - sbr
    - loopback
    - dhcp
    - ptp
    - ipvlan
    - bandwidth
  tags:
    - cni-install
